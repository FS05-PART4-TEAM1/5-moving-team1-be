import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { LessThan, Repository } from 'typeorm';
import {
  EstimateRequest,
  RequestStatus,
} from '@/estimate-request/entities/estimate-request.entity';
import {
  EstimateOffer,
  OfferStatus,
} from '@/estimate-offer/entities/estimate-offer.entity';
import { NotificationService } from '@/notification/notification.service';
import { NotificationType } from '@/notification/entities/notification.entity';
import { CreateNotificationDto } from '@/notification/dto/create-notification.dto';

@Injectable()
export class EstimateStatusUpdateJob {
  private readonly logger = new Logger(EstimateStatusUpdateJob.name);

  constructor(
    @InjectRepository(EstimateRequest)
    private estimateRequestRepo: Repository<EstimateRequest>,
    @InjectRepository(EstimateOffer)
    private estimateOfferRepo: Repository<EstimateOffer>,
    private notificationService: NotificationService,
  ) {
    this.logger.log('EstimateStatusUpdateJob Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }

  // Îß§Ïùº ÏûêÏ†ïÏóê Ïã§Ìñâ
  @Cron('0 0 * * *', { timeZone: 'Asia/Seoul' })
  async handleExpiredEstimates() {
    this.logger.log('üöÄ Ïä§ÏºÄÏ§ÑÎü¨ Ïã§Ìñâ ÏãúÏûë - Ïù¥ÏÇ¨ÎÇ† ÏßÄÎÇú Í≤¨Ï†Å ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏');

    // ÌïúÍµ≠ ÏãúÍ∞Ñ Í∏∞Ï§ÄÏúºÎ°ú Ïò§Îäò ÏûêÏ†ï Í≥ÑÏÇ∞
    const now = new Date();
    const kstOffset = 9 * 60; // KSTÎäî UTC+9
    const kstTime = new Date(now.getTime() + kstOffset * 60 * 1000);

    const today = new Date(
      kstTime.getFullYear(),
      kstTime.getMonth(),
      kstTime.getDate(),
    );

    try {
      // 1. Ïù¥ÏÇ¨ÎÇ†Ïù¥ ÏßÄÎÇú CONFIRMED ÏÉÅÌÉúÏùò Í≤¨Ï†Å ÏöîÏ≤≠Îì§ÏùÑ COMPLETEDÎ°ú Î≥ÄÍ≤Ω
      const confirmedRequests = await this.estimateRequestRepo.find({
        where: {
          moveDate: LessThan(today),
          status: RequestStatus.CONFIRMED,
        },
        relations: ['customer', 'customer.user'],
      });

      for (const request of confirmedRequests) {
        // Í≤¨Ï†Å ÏöîÏ≤≠ÏùÑ COMPLETEDÎ°ú Î≥ÄÍ≤Ω
        await this.estimateRequestRepo.update(request.id, {
          status: RequestStatus.COMPLETED,
        });

        // ÌôïÏ†ïÎêú Í≤¨Ï†Å Ï†úÏïàÎèÑ COMPLETEDÎ°ú Î≥ÄÍ≤Ω
        if (request.confirmedOfferId) {
          await this.estimateOfferRepo.update(request.confirmedOfferId, {
            status: OfferStatus.COMPLETED,
          });
        }

        // Í≥†Í∞ùÏóêÍ≤å ÏïåÎ¶º
        if (request.customer?.user) {
          const customerNotification: CreateNotificationDto = {
            userId: request.customer.user.id,
            type: NotificationType.WRITE_REVIEW,
            message: 'Ïù¥ÏÇ¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Î¶¨Î∑∞Î•º ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî.',
            targetId: request.id,
          };
          await this.notificationService.create(customerNotification);
        }

        this.logger.log(`Í≤¨Ï†Å ÏöîÏ≤≠ ${request.id} ‚Üí COMPLETED`);
      }

      // 2. Ïù¥ÏÇ¨ÎÇ†Ïù¥ ÏßÄÎÇú PENDING ÏÉÅÌÉúÏùò Í≤¨Ï†Å ÏöîÏ≤≠Îì§ÏùÑ EXPIREDÎ°ú Î≥ÄÍ≤Ω
      const pendingRequests = await this.estimateRequestRepo.find({
        where: {
          moveDate: LessThan(today),
          status: RequestStatus.PENDING,
        },
        relations: ['estimateOffers'],
      });

      for (const request of pendingRequests) {
        // Í≤¨Ï†Å ÏöîÏ≤≠ÏùÑ EXPIREDÎ°ú Î≥ÄÍ≤Ω
        await this.estimateRequestRepo.update(request.id, {
          status: RequestStatus.EXPIRED,
        });

        // Ìï¥Îãπ ÏöîÏ≤≠Ïùò Î™®Îì† PENDING ÏÉÅÌÉú Í≤¨Ï†Å Ï†úÏïàÎì§ÏùÑ EXPIREDÎ°ú Î≥ÄÍ≤Ω
        const pendingOffers = request.estimateOffers?.filter(
          (offer) => offer.status === OfferStatus.PENDING,
        );

        for (const offer of pendingOffers || []) {
          await this.estimateOfferRepo.update(offer.id, {
            status: OfferStatus.EXPIRED,
          });
        }

        this.logger.log(
          `Í≤¨Ï†Å ÏöîÏ≤≠ ${request.id} ‚Üí EXPIRED (Í¥ÄÎ†® Í≤¨Ï†Å Ï†úÏïà ${pendingOffers?.length || 0}Í∞ú)`,
        );
      }

      this.logger.log(
        `‚úÖ Ïä§ÏºÄÏ§ÑÎü¨ Ïã§Ìñâ ÏôÑÎ£å - COMPLETED: ${confirmedRequests.length}Í±¥, EXPIRED: ${pendingRequests.length}Í±¥`,
      );
    } catch (error) {
      this.logger.error('Í≤¨Ï†Å ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
  }
}
