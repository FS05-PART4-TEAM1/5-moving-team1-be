name: CI/CD Pipeline for EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/5-moving-app
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    name: 테스트 및 린트 검사

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: pnpm 설치
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      # - name: 린트 검사
      #   run: pnpm lint

      # - name: 테스트 실행
      #   run: pnpm test

      - name: 빌드 테스트
        run: pnpm build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: 도커 이미지 빌드 및 푸시
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 도커 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            COMMIT_HASH=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: EC2 배포
    if: github.ref == 'refs/heads/main'

    steps:
      - name: EC2 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 도커 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # 현재 실행 중인 컨테이너 정보 확인
            echo "=== 배포 전 현재 상태 ==="
            sudo docker ps | grep 5-moving-app || echo "실행 중인 컨테이너 없음"
            sudo docker images ${{ env.DOCKER_IMAGE }} | head -5 || echo "기존 이미지 없음"

            # 기존 컨테이너 중지 및 제거
            sudo docker stop 5-moving-app || true
            sudo docker rm 5-moving-app || true

            # 기존 이미지 제거 (캐시 문제 방지)
            echo "=== 기존 이미지 제거 ==="
            sudo docker rmi ${{ env.DOCKER_IMAGE }}:latest || true

            # 새 이미지 강제 풀
            echo "=== 새 이미지 다운로드 ==="
            sudo docker pull ${{ env.DOCKER_IMAGE }}:latest

            # 이미지 정보 상세 확인
            echo "=== 다운로드된 이미지 정보 ==="
            sudo docker images ${{ env.DOCKER_IMAGE }}:latest
            sudo docker inspect ${{ env.DOCKER_IMAGE }}:latest | grep Created | head -1

            # 새 컨테이너 실행
            echo "=== 새 컨테이너 실행 ==="
            sudo docker run -d \
              -p 3000:3000 \
              --name 5-moving-app \
              --restart unless-stopped \
              --env-file /home/ec2-user/.env \
              -e DEPLOY_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              ${{ env.DOCKER_IMAGE }}:latest

            # 컨테이너 시작 대기
            sleep 10

            # 배포 완료 후 상태 확인
            echo "=== 배포 완료 후 상태 확인 ==="
            echo "현재 시간: $(date)"
            echo "커밋 해시: ${{ github.sha }}"
            sudo docker ps | grep 5-moving-app
            echo "=== 컨테이너 로그 (최근 30줄) ==="
            sudo docker logs --tail 30 5-moving-app
            echo "=== 애플리케이션 버전 정보 확인 ==="
            curl -s http://localhost:3000/version || echo "버전 엔드포인트 응답 없음"
            echo "=== 기본 헬스체크 ==="
            curl -s http://localhost:3000/ || echo "헬스체크 응답 없음"

            # 사용하지 않는 이미지 정리
            sudo docker image prune -f

      - name: Discord 배포 성공 알림
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: '**MOVING 배포 성공! ✅ ** `${{ github.repository }}`의 새 버전이 AWS EC2에 배포되었습니다. 🥳 커밋: `${{ github.sha }}`'

      - name: Discord 배포 실패 알림
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: '**MOVING 배포 실패! ❌ ** `${{ github.repository }}`의 AWS EC2 배포가 실패했습니다. 😭 확인이 필요합니다 -> 커밋: `${{ github.sha }}`'
